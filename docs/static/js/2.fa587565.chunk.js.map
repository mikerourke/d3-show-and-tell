{"version":3,"sources":["../static/js/2.fa587565.chunk.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","../node_modules/monaco-editor/esm/vs/language/json/workerManager.js","../node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","../node_modules/monaco-editor/esm/vs/language/json/tokenization.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js","../node_modules/monaco-editor/esm/vs/language/json/jsonMode.js"],"names":["webpackJsonp","1059","module","__webpack_exports__","__webpack_require__","createScanner","text","ignoreTrivia","scanHexDigits","count","exact","digits","value","ch","charCodeAt","pos","setPosition","newPosition","tokenOffset","token","scanError","scanNumber","start","length","isDigit","substring","end","scanString","result","len","isLineBreak","ch_1","String","fromCharCode","scanNext","code","isWhiteSpace","commentClosed","isUnknownContentCharacter","scanNextNonTrivia","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","1100","format","documentText","range","options","newLineAndIndent","eol","repeat","indentValue","initialIndentLevel","indentLevel","scanner","lineBreak","hasError","addEdit","startOffset","endOffset","rangeEnd","rangeStart","editOperations","push","offset","content","formatText","formatTextStart","isEOL","computeIndentLevel","getEOL","insertSpaces","tabSize","Object","__WEBPACK_IMPORTED_MODULE_0__scanner_js__","firstToken","firstTokenStart","firstTokenEnd","secondToken","replaceContent","s","i","nChars","charAt","Math","floor","indexOf","1101","getLocation","position","setPreviousNode","type","previousNodeInst","columnOffset","previousNode","segments","earlyReturnException","isAtPropertyKey","visit","onObjectBegin","onObjectProperty","name","onObjectEnd","pop","onArrayBegin","onArrayEnd","onLiteralValue","getLiteralNodeType","onSeparator","sep","last","e","path","matches","pattern","k","parse","errors","onValue","Array","isArray","currentParent","currentProperty","previousParents","object","array","onError","error","parseTree","ensurePropertyComplete","parent","valueNode","children","findNodeAtLocation","root","node","_i","path_1","segment","found","_a","_b","propertyNode","index","getNodeValue","map","obj","create","prop","visitor","toNoArgVisit","visitFunction","_scanner","toOneArgVisit","arg","handleError","disallowComments","onComment","skipUntilAfter","skipUntil","parseString","isValue","parseLiteral","JSON","parseProperty","parseValue","parseObject","needsComma","allowTrailingComma","parseArray","stripComments","replaceCh","kind","parts","replace","join","1206","toShallowCancelPromise","p","completeCallback","errorCallback","r","Promise","c","then","d","WorkerManager","monaco","defaults","_this","this","_defaults","_worker","_idleCheckInterval","setInterval","_checkIfIdle","_lastUsedTime","_configChangeListener","onDidChange","_stopWorker","prototype","dispose","_client","clearInterval","Date","now","_getClient","editor","createWebWorker","moduleId","label","languageId","createData","languageSettings","diagnosticsOptions","getProxy","getLanguageServiceWorker","resources","arguments","client","_","withSyncedResources","1207","toSeverity","lsSeverity","__WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__","Error","MarkerSeverity","Warning","Information","Info","Hint","toDiagnostics","resource","diag","severity","startLineNumber","line","startColumn","character","endLineNumber","endColumn","message","source","fromPosition","column","lineNumber","fromRange","toRange","Range","toCompletionItemKind","mItemKind","languages","CompletionItemKind","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","Color","File","Reference","toTextEdit","textEdit","newText","isMarkupContent","thing","toMarkdownString","entry","language","toMarkedStringArray","contents","toLocation","location","uri","Uri","toSymbolKind","mKind","SymbolKind","Namespace","Package","Constant","Number","Boolean","fromFormattingOptions","wireCancellationToken","promise","cancel","onCancellationRequested","DiagnosticsAdapter","CompletionAdapter","HoverAdapter","DocumentSymbolAdapter","DocumentFormattingEditProvider","DocumentRangeFormattingEditProvider","DocumentColorAdapter","_languageId","_disposables","_listener","onModelAdd","model","modeId","getModeId","handle","toString","onDidChangeContent","clearTimeout","setTimeout","_doValidate","onModelRemoved","setModelMarkers","uriStr","listener","onDidCreateModel","onWillDisposeModel","_resetSchema","onDidChangeModelLanguage","event","getModels","forEach","key","worker","resetSchema","doValidation","diagnostics","markers","getModel","undefined","err","console","defineProperty","get","enumerable","configurable","provideCompletionItems","getWordUntilPosition","doComplete","info","items","item","insertText","sortText","filterText","documentation","detail","insertTextFormat","isIncomplete","provideHover","doHover","provideDocumentSymbols","findDocumentSymbols","containerName","provideDocumentFormattingEdits","edits","provideDocumentRangeFormattingEdits","provideDocumentColors","findDocumentColors","infos","color","provideColorPresentations","getColorPresentations","presentations","presentation","additionalTextEdits","1208","DiagnosticSeverity","TextEdit","MarkupKind","InsertTextFormat","Position","is","candidate","Is","defined","number","one","two","three","four","Location","string","Diagnostic","Command","title","command","args","insert","del","TextDocumentEdit","textDocument","VersionedTextDocumentIdentifier","TextDocumentIdentifier","TextEditChangeImpl","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_textEditChanges","_workspaceEdit","documentChanges","textDocumentEdit","textEditChange","changes","keys","getTextEditChange","version","TextDocumentItem","PlainText","Markdown","Folder","EnumMember","Struct","Event","Operator","TypeParameter","CompletionItem","CompletionList","MarkedString","fromPlainText","plainText","ParameterInformation","SignatureInformation","parameters","DocumentHighlightKind","Read","Write","DocumentHighlight","Key","Null","SymbolInformation","CodeActionContext","typedArray","CodeLens","data","FormattingOptions","boolean","DocumentLink","target","TextDocument","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","a","b","lastModifiedOffset","compare","left","slice","right","leftIdx","rightIdx","ret","TextDocumentSaveReason","Manual","AfterDelay","FocusOut","_uri","_version","_content","_lineOffsets","update","getLineOffsets","lineOffsets","isLineStart","max","min","low","high","mid","lineOffset","nextLineOffset","call","check","every","1209","createTokenizationSupport","supportComments","getInitialState","JSONState","tokenize","state","offsetDelta","stopAtOffset","comments","numberOfInsertedCharacters","adjustOffset","__WEBPACK_IMPORTED_MODULE_0__deps_jsonc_parser_main_js__","lastWasColon","tokens","endState","clone","substr","TOKEN_DELIM_OBJECT","TOKEN_DELIM_ARRAY","TOKEN_DELIM_COLON","TOKEN_DELIM_COMMA","TOKEN_VALUE_BOOLEAN","TOKEN_VALUE_NULL","TOKEN_VALUE_STRING","TOKEN_PROPERTY_NAME","TOKEN_VALUE_NUMBER","TOKEN_COMMENT_LINE","TOKEN_COMMENT_BLOCK","getStateData","startIndex","scopes","_state","equals","other","setStateData","1210","__WEBPACK_IMPORTED_MODULE_2__impl_scanner_js__","__WEBPACK_IMPORTED_MODULE_3__impl_parser_js__","1211","setProperty","formattingOptions","getInsertionIndex","__WEBPACK_IMPORTED_MODULE_1__parser_js__","lastSegment","existing","propertyIndex","removeBegin","removeEnd","previous","next","withFormatting","stringify","newProperty","removalIndex","toRemove","parentEndOffset","applyEdit","begin","__WEBPACK_IMPORTED_MODULE_0__format_js__","edit_1","982","setupMode","disposables","__WEBPACK_IMPORTED_MODULE_0__workerManager_js__","uris","apply","registerCompletionItemProvider","__WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__","registerHoverProvider","registerDocumentSymbolProvider","registerDocumentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","setTokensProvider","__WEBPACK_IMPORTED_MODULE_2__tokenization_js__","setLanguageConfiguration","richEditConfiguration","registerColorProvider","wordPattern","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn"],"mappings":"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","file":"static/js/2.fa587565.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 1059:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = createScanner;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nfunction createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map\n\n/***/ }),\n\n/***/ 1100:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = format;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = isEOL;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__scanner_js__ = __webpack_require__(1059);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nfunction format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, 0, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = Object(__WEBPACK_IMPORTED_MODULE_0__scanner_js__[\"a\" /* createScanner */])(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, offset, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nfunction isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map\n\n/***/ }),\n\n/***/ 1101:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = getLocation;\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = parse;\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = parseTree;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = findNodeAtLocation;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = getNodeValue;\n/* harmony export (immutable) */ __webpack_exports__[\"g\"] = visit;\n/* harmony export (immutable) */ __webpack_exports__[\"f\"] = stripComments;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__scanner_js__ = __webpack_require__(1059);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nfunction getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object'\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.columnOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.columnOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nfunction parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nfunction parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [] }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.columnOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nfunction findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nfunction getNodeValue(node) {\n    if (node.type === 'array') {\n        return node.children.map(getNodeValue);\n    }\n    else if (node.type === 'object') {\n        var obj = Object.create(null);\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n            var prop = _a[_i];\n            obj[prop.children[0].value] = getNodeValue(prop.children[1]);\n        }\n        return obj;\n    }\n    return node.value;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nfunction visit(text, visitor, options) {\n    var _scanner = Object(__WEBPACK_IMPORTED_MODULE_0__scanner_js__[\"a\" /* createScanner */])(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nfunction stripComments(text, replaceCh) {\n    var _scanner = Object(__WEBPACK_IMPORTED_MODULE_0__scanner_js__[\"a\" /* createScanner */])(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map\n\n/***/ }),\n\n/***/ 1206:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return WorkerManager; });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nvar Promise = monaco.Promise;\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\nvar WorkerManager = /** @class */ (function () {\n    function WorkerManager(defaults) {\n        var _this = this;\n        this._defaults = defaults;\n        this._worker = null;\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\n        this._lastUsedTime = 0;\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\n    }\n    WorkerManager.prototype._stopWorker = function () {\n        if (this._worker) {\n            this._worker.dispose();\n            this._worker = null;\n        }\n        this._client = null;\n    };\n    WorkerManager.prototype.dispose = function () {\n        clearInterval(this._idleCheckInterval);\n        this._configChangeListener.dispose();\n        this._stopWorker();\n    };\n    WorkerManager.prototype._checkIfIdle = function () {\n        if (!this._worker) {\n            return;\n        }\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n            this._stopWorker();\n        }\n    };\n    WorkerManager.prototype._getClient = function () {\n        this._lastUsedTime = Date.now();\n        if (!this._client) {\n            this._worker = monaco.editor.createWebWorker({\n                // module that exports the create() method and returns a `JSONWorker` instance\n                moduleId: 'vs/language/json/jsonWorker',\n                label: this._defaults.languageId,\n                // passed in to the create() method\n                createData: {\n                    languageSettings: this._defaults.diagnosticsOptions,\n                    languageId: this._defaults.languageId\n                }\n            });\n            this._client = this._worker.getProxy();\n        }\n        return this._client;\n    };\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\n        var _this = this;\n        var resources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            resources[_i] = arguments[_i];\n        }\n        var _client;\n        return toShallowCancelPromise(this._getClient().then(function (client) {\n            _client = client;\n        }).then(function (_) {\n            return _this._worker.withSyncedResources(resources);\n        }).then(function (_) { return _client; }));\n    };\n    return WorkerManager;\n}());\n\nfunction toShallowCancelPromise(p) {\n    var completeCallback;\n    var errorCallback;\n    var r = new Promise(function (c, e) {\n        completeCallback = c;\n        errorCallback = e;\n    }, function () { });\n    p.then(completeCallback, errorCallback);\n    return r;\n}\n\n\n/***/ }),\n\n/***/ 1207:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DiagnosticsAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CompletionAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return HoverAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return DocumentSymbolAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return DocumentFormattingEditProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return DocumentRangeFormattingEditProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DocumentColorAdapter; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__ = __webpack_require__(1208);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nvar Uri = monaco.Uri;\nvar Range = monaco.Range;\n// --- diagnostics --- ---\nvar DiagnosticsAdapter = /** @class */ (function () {\n    function DiagnosticsAdapter(_languageId, _worker, defaults) {\n        var _this = this;\n        this._languageId = _languageId;\n        this._worker = _worker;\n        this._disposables = [];\n        this._listener = Object.create(null);\n        var onModelAdd = function (model) {\n            var modeId = model.getModeId();\n            if (modeId !== _this._languageId) {\n                return;\n            }\n            var handle;\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\n                clearTimeout(handle);\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\n            });\n            _this._doValidate(model.uri, modeId);\n        };\n        var onModelRemoved = function (model) {\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\n            var uriStr = model.uri.toString();\n            var listener = _this._listener[uriStr];\n            if (listener) {\n                listener.dispose();\n                delete _this._listener[uriStr];\n            }\n        };\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\n            onModelRemoved(model);\n            _this._resetSchema(model.uri);\n        }));\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n            onModelRemoved(event.model);\n            onModelAdd(event.model);\n            _this._resetSchema(event.model.uri);\n        }));\n        this._disposables.push(defaults.onDidChange(function (_) {\n            monaco.editor.getModels().forEach(function (model) {\n                if (model.getModeId() === _this._languageId) {\n                    onModelRemoved(model);\n                    onModelAdd(model);\n                }\n            });\n        }));\n        this._disposables.push({\n            dispose: function () {\n                monaco.editor.getModels().forEach(onModelRemoved);\n                for (var key in _this._listener) {\n                    _this._listener[key].dispose();\n                }\n            }\n        });\n        monaco.editor.getModels().forEach(onModelAdd);\n    }\n    DiagnosticsAdapter.prototype.dispose = function () {\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\n        this._disposables = [];\n    };\n    DiagnosticsAdapter.prototype._resetSchema = function (resource) {\n        this._worker().then(function (worker) {\n            worker.resetSchema(resource.toString());\n        });\n    };\n    DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\n        this._worker(resource).then(function (worker) {\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\n                var model = monaco.editor.getModel(resource);\n                if (model.getModeId() === languageId) {\n                    monaco.editor.setModelMarkers(model, languageId, markers);\n                }\n            });\n        }).then(undefined, function (err) {\n            console.error(err);\n        });\n    };\n    return DiagnosticsAdapter;\n}());\n\nfunction toSeverity(lsSeverity) {\n    switch (lsSeverity) {\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"b\" /* DiagnosticSeverity */].Error: return monaco.MarkerSeverity.Error;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"b\" /* DiagnosticSeverity */].Warning: return monaco.MarkerSeverity.Warning;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"b\" /* DiagnosticSeverity */].Information: return monaco.MarkerSeverity.Info;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"b\" /* DiagnosticSeverity */].Hint: return monaco.MarkerSeverity.Hint;\n        default:\n            return monaco.MarkerSeverity.Info;\n    }\n}\nfunction toDiagnostics(resource, diag) {\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\n    return {\n        severity: toSeverity(diag.severity),\n        startLineNumber: diag.range.start.line + 1,\n        startColumn: diag.range.start.character + 1,\n        endLineNumber: diag.range.end.line + 1,\n        endColumn: diag.range.end.character + 1,\n        message: diag.message,\n        code: code,\n        source: diag.source\n    };\n}\n// --- completion ------\nfunction fromPosition(position) {\n    if (!position) {\n        return void 0;\n    }\n    return { character: position.column - 1, line: position.lineNumber - 1 };\n}\nfunction fromRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return { start: { line: range.startLineNumber - 1, character: range.startColumn - 1 }, end: { line: range.endLineNumber - 1, character: range.endColumn - 1 } };\n}\nfunction toRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\n}\nfunction toCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Text: return mItemKind.Text;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Method: return mItemKind.Method;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Function: return mItemKind.Function;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Constructor: return mItemKind.Constructor;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Field: return mItemKind.Field;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Variable: return mItemKind.Variable;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Class: return mItemKind.Class;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Interface: return mItemKind.Interface;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Module: return mItemKind.Module;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Property: return mItemKind.Property;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Unit: return mItemKind.Unit;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Value: return mItemKind.Value;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Enum: return mItemKind.Enum;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Keyword: return mItemKind.Keyword;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Snippet: return mItemKind.Snippet;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Color: return mItemKind.Color;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].File: return mItemKind.File;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Reference: return mItemKind.Reference;\n    }\n    return mItemKind.Property;\n}\nfunction fromCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case mItemKind.Text: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Text;\n        case mItemKind.Method: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Method;\n        case mItemKind.Function: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Function;\n        case mItemKind.Constructor: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Constructor;\n        case mItemKind.Field: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Field;\n        case mItemKind.Variable: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Variable;\n        case mItemKind.Class: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Class;\n        case mItemKind.Interface: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Interface;\n        case mItemKind.Module: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Module;\n        case mItemKind.Property: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Property;\n        case mItemKind.Unit: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Unit;\n        case mItemKind.Value: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Value;\n        case mItemKind.Enum: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Enum;\n        case mItemKind.Keyword: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Keyword;\n        case mItemKind.Snippet: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Snippet;\n        case mItemKind.Color: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Color;\n        case mItemKind.File: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].File;\n        case mItemKind.Reference: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Reference;\n    }\n    return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Property;\n}\nfunction toTextEdit(textEdit) {\n    if (!textEdit) {\n        return void 0;\n    }\n    return {\n        range: toRange(textEdit.range),\n        text: textEdit.newText\n    };\n}\nfunction toCompletionItem(entry) {\n    return {\n        label: entry.label,\n        insertText: entry.insertText,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: entry.documentation,\n        detail: entry.detail,\n        kind: toCompletionItemKind(entry.kind),\n        textEdit: toTextEdit(entry.textEdit),\n        data: entry.data\n    };\n}\nfunction fromMarkdownString(entry) {\n    return {\n        kind: (typeof entry === 'string' ? __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"d\" /* MarkupKind */].PlainText : __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"d\" /* MarkupKind */].Markdown),\n        value: (typeof entry === 'string' ? entry : entry.value)\n    };\n}\nfunction fromCompletionItem(entry) {\n    var item = {\n        label: entry.label,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: fromMarkdownString(entry.documentation),\n        detail: entry.detail,\n        kind: fromCompletionItemKind(entry.kind),\n        data: entry.data\n    };\n    if (typeof entry.insertText === 'object' && typeof entry.insertText.value === 'string') {\n        item.insertText = entry.insertText.value;\n        item.insertTextFormat = __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"c\" /* InsertTextFormat */].Snippet;\n    }\n    else {\n        item.insertText = entry.insertText;\n    }\n    if (entry.range) {\n        item.textEdit = __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"f\" /* TextEdit */].replace(fromRange(entry.range), item.insertText);\n    }\n    return item;\n}\nvar CompletionAdapter = /** @class */ (function () {\n    function CompletionAdapter(_worker) {\n        this._worker = _worker;\n    }\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\n        get: function () {\n            return [' ', ':'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, token) {\n        var wordInfo = model.getWordUntilPosition(position);\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doComplete(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            var items = info.items.map(function (entry) {\n                var item = {\n                    label: entry.label,\n                    insertText: entry.insertText,\n                    sortText: entry.sortText,\n                    filterText: entry.filterText,\n                    documentation: entry.documentation,\n                    detail: entry.detail,\n                    kind: toCompletionItemKind(entry.kind),\n                };\n                if (entry.textEdit) {\n                    item.range = toRange(entry.textEdit.range);\n                    item.insertText = entry.textEdit.newText;\n                }\n                if (entry.insertTextFormat === __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"c\" /* InsertTextFormat */].Snippet) {\n                    item.insertText = { value: item.insertText };\n                }\n                return item;\n            });\n            return {\n                isIncomplete: info.isIncomplete,\n                items: items\n            };\n        }));\n    };\n    return CompletionAdapter;\n}());\n\nfunction isMarkupContent(thing) {\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\n}\nfunction toMarkdownString(entry) {\n    if (typeof entry === 'string') {\n        return {\n            value: entry\n        };\n    }\n    if (isMarkupContent(entry)) {\n        if (entry.kind === 'plaintext') {\n            return {\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\n            };\n        }\n        return {\n            value: entry.value\n        };\n    }\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\n}\nfunction toMarkedStringArray(contents) {\n    if (!contents) {\n        return void 0;\n    }\n    if (Array.isArray(contents)) {\n        return contents.map(toMarkdownString);\n    }\n    return [toMarkdownString(contents)];\n}\n// --- hover ------\nvar HoverAdapter = /** @class */ (function () {\n    function HoverAdapter(_worker) {\n        this._worker = _worker;\n    }\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doHover(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            return {\n                range: toRange(info.range),\n                contents: toMarkedStringArray(info.contents)\n            };\n        }));\n    };\n    return HoverAdapter;\n}());\n\n// --- definition ------\nfunction toLocation(location) {\n    return {\n        uri: Uri.parse(location.uri),\n        range: toRange(location.range)\n    };\n}\n// --- document symbols ------\nfunction toSymbolKind(kind) {\n    var mKind = monaco.languages.SymbolKind;\n    switch (kind) {\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].File: return mKind.Array;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Module: return mKind.Module;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Namespace: return mKind.Namespace;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Package: return mKind.Package;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Class: return mKind.Class;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Method: return mKind.Method;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Property: return mKind.Property;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Field: return mKind.Field;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Constructor: return mKind.Constructor;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Enum: return mKind.Enum;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Interface: return mKind.Interface;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Function: return mKind.Function;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Variable: return mKind.Variable;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Constant: return mKind.Constant;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].String: return mKind.String;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Number: return mKind.Number;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Boolean: return mKind.Boolean;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Array: return mKind.Array;\n    }\n    return mKind.Function;\n}\nvar DocumentSymbolAdapter = /** @class */ (function () {\n    function DocumentSymbolAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\n            if (!items) {\n                return;\n            }\n            return items.map(function (item) { return ({\n                name: item.name,\n                containerName: item.containerName,\n                kind: toSymbolKind(item.kind),\n                location: toLocation(item.location)\n            }); });\n        }));\n    };\n    return DocumentSymbolAdapter;\n}());\n\nfunction fromFormattingOptions(options) {\n    return {\n        tabSize: options.tabSize,\n        insertSpaces: options.insertSpaces\n    };\n}\nvar DocumentFormattingEditProvider = /** @class */ (function () {\n    function DocumentFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentFormattingEditProvider;\n}());\n\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\n    function DocumentRangeFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentRangeFormattingEditProvider;\n}());\n\nvar DocumentColorAdapter = /** @class */ (function () {\n    function DocumentColorAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.findDocumentColors(resource.toString()); }).then(function (infos) {\n            if (!infos) {\n                return;\n            }\n            return infos.map(function (item) { return ({\n                color: item.color,\n                range: toRange(item.range)\n            }); });\n        }));\n    };\n    DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range)); }).then(function (presentations) {\n            if (!presentations) {\n                return;\n            }\n            return presentations.map(function (presentation) {\n                var item = {\n                    label: presentation.label,\n                };\n                if (presentation.textEdit) {\n                    item.textEdit = toTextEdit(presentation.textEdit);\n                }\n                if (presentation.additionalTextEdits) {\n                    item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\n                }\n                return item;\n            });\n        }));\n    };\n    return DocumentColorAdapter;\n}());\n\n/**\n * Hook a cancellation token to a WinJS Promise\n */\nfunction wireCancellationToken(token, promise) {\n    if (promise.cancel) {\n        token.onCancellationRequested(function () { return promise.cancel(); });\n    }\n    return promise;\n}\n\n\n/***/ }),\n\n/***/ 1208:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export Position */\n/* unused harmony export Range */\n/* unused harmony export Location */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DiagnosticSeverity; });\n/* unused harmony export Diagnostic */\n/* unused harmony export Command */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return TextEdit; });\n/* unused harmony export TextDocumentEdit */\n/* unused harmony export WorkspaceChange */\n/* unused harmony export TextDocumentIdentifier */\n/* unused harmony export VersionedTextDocumentIdentifier */\n/* unused harmony export TextDocumentItem */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return MarkupKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CompletionItemKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return InsertTextFormat; });\n/* unused harmony export CompletionItem */\n/* unused harmony export CompletionList */\n/* unused harmony export MarkedString */\n/* unused harmony export ParameterInformation */\n/* unused harmony export SignatureInformation */\n/* unused harmony export DocumentHighlightKind */\n/* unused harmony export DocumentHighlight */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return SymbolKind; });\n/* unused harmony export SymbolInformation */\n/* unused harmony export CodeActionContext */\n/* unused harmony export CodeLens */\n/* unused harmony export FormattingOptions */\n/* unused harmony export DocumentLink */\n/* unused harmony export EOL */\n/* unused harmony export TextDocument */\n/* unused harmony export TextDocumentSaveReason */\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nvar Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nvar Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nvar Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The diagnostic's serverity.\n */\nvar DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nvar Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nvar Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.title);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nvar TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: '' };\n    }\n    TextEdit.del = del;\n})(TextEdit || (TextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nvar TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits) {\n        this.edits = edits;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\n        this.edits.push(TextEdit.insert(position, newText));\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\n        this.edits.push(TextEdit.replace(range, newText));\n    };\n    TextEditChangeImpl.prototype.delete = function (range) {\n        this.edits.push(TextEdit.del(range));\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            return this._workspaceEdit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (VersionedTextDocumentIdentifier.is(key)) {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    documentChanges: []\n                };\n            }\n            if (!this._workspaceEdit.documentChanges) {\n                throw new Error('Workspace edit is not configured for versioned document changes.');\n            }\n            var textDocument = key;\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    changes: Object.create(null)\n                };\n            }\n            if (!this._workspaceEdit.changes) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    return WorkspaceChange;\n}());\n\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nvar TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nvar VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param uri The document's text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nvar TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nvar MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n/**\n * The kind of a completion entry.\n */\nvar CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nvar InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nvar CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nvar CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nvar MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n})(MarkedString || (MarkedString = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nvar ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n    ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nvar SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nvar DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrance.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nvar DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nvar SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nvar SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containg the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nvar CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics) {\n        return { diagnostics: diagnostics };\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nvar CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data))\n            result.data = data;\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nvar FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * A document link is a range in a text document that links to an internal or external resource, like another\n * text document or a web site.\n */\nvar DocumentLink = /** @class */ (function () {\n    function DocumentLink() {\n    }\n    return DocumentLink;\n}());\n\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target) {\n        return { range: range, target: target };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\nvar EOL = ['\\n', '\\r\\n', '\\r'];\nvar TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return 0;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Ovelapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nvar TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = null;\n    }\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = null;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === null) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n\n\n/***/ }),\n\n/***/ 1209:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = createTokenizationSupport;\n/* unused harmony export TOKEN_DELIM_OBJECT */\n/* unused harmony export TOKEN_DELIM_ARRAY */\n/* unused harmony export TOKEN_DELIM_COLON */\n/* unused harmony export TOKEN_DELIM_COMMA */\n/* unused harmony export TOKEN_VALUE_BOOLEAN */\n/* unused harmony export TOKEN_VALUE_NULL */\n/* unused harmony export TOKEN_VALUE_STRING */\n/* unused harmony export TOKEN_VALUE_NUMBER */\n/* unused harmony export TOKEN_PROPERTY_NAME */\n/* unused harmony export TOKEN_COMMENT_BLOCK */\n/* unused harmony export TOKEN_COMMENT_LINE */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deps_jsonc_parser_main_js__ = __webpack_require__(1210);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nfunction createTokenizationSupport(supportComments) {\n    return {\n        getInitialState: function () { return new JSONState(null, null, false); },\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\n    };\n}\nvar TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\nvar TOKEN_DELIM_ARRAY = 'delimiter.array.json';\nvar TOKEN_DELIM_COLON = 'delimiter.colon.json';\nvar TOKEN_DELIM_COMMA = 'delimiter.comma.json';\nvar TOKEN_VALUE_BOOLEAN = 'keyword.json';\nvar TOKEN_VALUE_NULL = 'keyword.json';\nvar TOKEN_VALUE_STRING = 'string.value.json';\nvar TOKEN_VALUE_NUMBER = 'number.json';\nvar TOKEN_PROPERTY_NAME = 'string.key.json';\nvar TOKEN_COMMENT_BLOCK = 'comment.block.json';\nvar TOKEN_COMMENT_LINE = 'comment.line.json';\nvar JSONState = /** @class */ (function () {\n    function JSONState(state, scanError, lastWasColon) {\n        this._state = state;\n        this.scanError = scanError;\n        this.lastWasColon = lastWasColon;\n    }\n    JSONState.prototype.clone = function () {\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\n    };\n    JSONState.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        }\n        if (!other || !(other instanceof JSONState)) {\n            return false;\n        }\n        return this.scanError === other.scanError &&\n            this.lastWasColon === other.lastWasColon;\n    };\n    JSONState.prototype.getStateData = function () {\n        return this._state;\n    };\n    JSONState.prototype.setStateData = function (state) {\n        this._state = state;\n    };\n    return JSONState;\n}());\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\n    if (offsetDelta === void 0) { offsetDelta = 0; }\n    // handle multiline strings and block comments\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\n    switch (state.scanError) {\n        case 2 /* UnexpectedEndOfString */:\n            line = '\"' + line;\n            numberOfInsertedCharacters = 1;\n            break;\n        case 1 /* UnexpectedEndOfComment */:\n            line = '/*' + line;\n            numberOfInsertedCharacters = 2;\n            break;\n    }\n    var scanner = __WEBPACK_IMPORTED_MODULE_0__deps_jsonc_parser_main_js__[\"a\" /* createScanner */](line), kind, ret, lastWasColon = state.lastWasColon;\n    ret = {\n        tokens: [],\n        endState: state.clone()\n    };\n    while (true) {\n        var offset = offsetDelta + scanner.getPosition(), type = '';\n        kind = scanner.scan();\n        if (kind === 17 /* EOF */) {\n            break;\n        }\n        // Check that the scanner has advanced\n        if (offset === offsetDelta + scanner.getPosition()) {\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n        }\n        // In case we inserted /* or \" character, we need to\n        // adjust the offset of all tokens (except the first)\n        if (adjustOffset) {\n            offset -= numberOfInsertedCharacters;\n        }\n        adjustOffset = numberOfInsertedCharacters > 0;\n        // brackets and type\n        switch (kind) {\n            case 1 /* OpenBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 2 /* CloseBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 3 /* OpenBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 4 /* CloseBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 6 /* ColonToken */:\n                type = TOKEN_DELIM_COLON;\n                lastWasColon = true;\n                break;\n            case 5 /* CommaToken */:\n                type = TOKEN_DELIM_COMMA;\n                lastWasColon = false;\n                break;\n            case 8 /* TrueKeyword */:\n            case 9 /* FalseKeyword */:\n                type = TOKEN_VALUE_BOOLEAN;\n                lastWasColon = false;\n                break;\n            case 7 /* NullKeyword */:\n                type = TOKEN_VALUE_NULL;\n                lastWasColon = false;\n                break;\n            case 10 /* StringLiteral */:\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\n                lastWasColon = false;\n                break;\n            case 11 /* NumericLiteral */:\n                type = TOKEN_VALUE_NUMBER;\n                lastWasColon = false;\n                break;\n        }\n        // comments, iff enabled\n        if (comments) {\n            switch (kind) {\n                case 12 /* LineCommentTrivia */:\n                    type = TOKEN_COMMENT_LINE;\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    type = TOKEN_COMMENT_BLOCK;\n                    break;\n            }\n        }\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\n        ret.tokens.push({\n            startIndex: offset,\n            scopes: type\n        });\n    }\n    return ret;\n}\n\n\n/***/ }),\n\n/***/ 1210:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return createScanner; });\n/* unused harmony export getLocation */\n/* unused harmony export parse */\n/* unused harmony export parseTree */\n/* unused harmony export findNodeAtLocation */\n/* unused harmony export getNodeValue */\n/* unused harmony export visit */\n/* unused harmony export stripComments */\n/* unused harmony export format */\n/* unused harmony export modify */\n/* unused harmony export applyEdits */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__impl_format_js__ = __webpack_require__(1100);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__impl_edit_js__ = __webpack_require__(1211);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__impl_scanner_js__ = __webpack_require__(1059);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__ = __webpack_require__(1101);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nvar createScanner = __WEBPACK_IMPORTED_MODULE_2__impl_scanner_js__[\"a\" /* createScanner */];\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nvar getLocation = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"b\" /* getLocation */];\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nvar parse = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"d\" /* parse */];\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nvar parseTree = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"e\" /* parseTree */];\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nvar findNodeAtLocation = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"a\" /* findNodeAtLocation */];\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nvar getNodeValue = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"c\" /* getNodeValue */];\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nvar visit = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"g\" /* visit */];\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nvar stripComments = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"f\" /* stripComments */];\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nfunction format(documentText, range, options) {\n    return __WEBPACK_IMPORTED_MODULE_0__impl_format_js__[\"a\" /* format */](documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nfunction modify(text, path, value, options) {\n    return __WEBPACK_IMPORTED_MODULE_1__impl_edit_js__[\"b\" /* setProperty */](text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nfunction applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = __WEBPACK_IMPORTED_MODULE_1__impl_edit_js__[\"a\" /* applyEdit */](text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map\n\n/***/ }),\n\n/***/ 1211:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export removeProperty */\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = setProperty;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = applyEdit;\n/* unused harmony export isWS */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__format_js__ = __webpack_require__(1100);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__parser_js__ = __webpack_require__(1101);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nfunction removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nfunction setProperty(text, path, value, formattingOptions, getInsertionIndex) {\n    var errors = [];\n    var root = Object(__WEBPACK_IMPORTED_MODULE_1__parser_js__[\"e\" /* parseTree */])(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = Object(__WEBPACK_IMPORTED_MODULE_1__parser_js__[\"a\" /* findNodeAtLocation */])(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) {\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = Object(__WEBPACK_IMPORTED_MODULE_1__parser_js__[\"a\" /* findNodeAtLocation */])(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) {\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) {\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n    var _a;\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) {\n        while (begin > 0 && !Object(__WEBPACK_IMPORTED_MODULE_0__format_js__[\"b\" /* isEOL */])(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !Object(__WEBPACK_IMPORTED_MODULE_0__format_js__[\"b\" /* isEOL */])(newText, end)) {\n            end++;\n        }\n    }\n    var edits = Object(__WEBPACK_IMPORTED_MODULE_0__format_js__[\"a\" /* format */])(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nfunction applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nfunction isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map\n\n/***/ }),\n\n/***/ 982:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"setupMode\"] = setupMode;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__workerManager_js__ = __webpack_require__(1206);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__ = __webpack_require__(1207);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tokenization_js__ = __webpack_require__(1209);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\nfunction setupMode(defaults) {\n    var disposables = [];\n    var client = new __WEBPACK_IMPORTED_MODULE_0__workerManager_js__[\"a\" /* WorkerManager */](defaults);\n    disposables.push(client);\n    var worker = function () {\n        var uris = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            uris[_i] = arguments[_i];\n        }\n        return client.getLanguageServiceWorker.apply(client, uris);\n    };\n    var languageId = defaults.languageId;\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"a\" /* CompletionAdapter */](worker)));\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"g\" /* HoverAdapter */](worker)));\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"f\" /* DocumentSymbolAdapter */](worker)));\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"d\" /* DocumentFormattingEditProvider */](worker)));\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"e\" /* DocumentRangeFormattingEditProvider */](worker)));\n    disposables.push(new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"b\" /* DiagnosticsAdapter */](languageId, worker, defaults));\n    disposables.push(monaco.languages.setTokensProvider(languageId, Object(__WEBPACK_IMPORTED_MODULE_2__tokenization_js__[\"a\" /* createTokenizationSupport */])(true)));\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\n    disposables.push(monaco.languages.registerColorProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"c\" /* DocumentColorAdapter */](worker)));\n}\nvar richEditConfiguration = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string'] },\n        { open: '[', close: ']', notIn: ['string'] },\n        { open: '\"', close: '\"', notIn: ['string'] }\n    ]\n};\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/2.fa587565.chunk.js","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js\n// module id = 1059\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, 0, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, offset, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js\n// module id = 1100\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object'\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.columnOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.columnOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [] }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.columnOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    if (node.type === 'array') {\n        return node.children.map(getNodeValue);\n    }\n    else if (node.type === 'object') {\n        var obj = Object.create(null);\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n            var prop = _a[_i];\n            obj[prop.children[0].value] = getNodeValue(prop.children[1]);\n        }\n        return obj;\n    }\n    return node.value;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js\n// module id = 1101\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar Promise = monaco.Promise;\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\nvar WorkerManager = /** @class */ (function () {\n    function WorkerManager(defaults) {\n        var _this = this;\n        this._defaults = defaults;\n        this._worker = null;\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\n        this._lastUsedTime = 0;\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\n    }\n    WorkerManager.prototype._stopWorker = function () {\n        if (this._worker) {\n            this._worker.dispose();\n            this._worker = null;\n        }\n        this._client = null;\n    };\n    WorkerManager.prototype.dispose = function () {\n        clearInterval(this._idleCheckInterval);\n        this._configChangeListener.dispose();\n        this._stopWorker();\n    };\n    WorkerManager.prototype._checkIfIdle = function () {\n        if (!this._worker) {\n            return;\n        }\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n            this._stopWorker();\n        }\n    };\n    WorkerManager.prototype._getClient = function () {\n        this._lastUsedTime = Date.now();\n        if (!this._client) {\n            this._worker = monaco.editor.createWebWorker({\n                // module that exports the create() method and returns a `JSONWorker` instance\n                moduleId: 'vs/language/json/jsonWorker',\n                label: this._defaults.languageId,\n                // passed in to the create() method\n                createData: {\n                    languageSettings: this._defaults.diagnosticsOptions,\n                    languageId: this._defaults.languageId\n                }\n            });\n            this._client = this._worker.getProxy();\n        }\n        return this._client;\n    };\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\n        var _this = this;\n        var resources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            resources[_i] = arguments[_i];\n        }\n        var _client;\n        return toShallowCancelPromise(this._getClient().then(function (client) {\n            _client = client;\n        }).then(function (_) {\n            return _this._worker.withSyncedResources(resources);\n        }).then(function (_) { return _client; }));\n    };\n    return WorkerManager;\n}());\nexport { WorkerManager };\nfunction toShallowCancelPromise(p) {\n    var completeCallback;\n    var errorCallback;\n    var r = new Promise(function (c, e) {\n        completeCallback = c;\n        errorCallback = e;\n    }, function () { });\n    p.then(completeCallback, errorCallback);\n    return r;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/workerManager.js\n// module id = 1206\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nvar Uri = monaco.Uri;\nvar Range = monaco.Range;\n// --- diagnostics --- ---\nvar DiagnosticsAdapter = /** @class */ (function () {\n    function DiagnosticsAdapter(_languageId, _worker, defaults) {\n        var _this = this;\n        this._languageId = _languageId;\n        this._worker = _worker;\n        this._disposables = [];\n        this._listener = Object.create(null);\n        var onModelAdd = function (model) {\n            var modeId = model.getModeId();\n            if (modeId !== _this._languageId) {\n                return;\n            }\n            var handle;\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\n                clearTimeout(handle);\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\n            });\n            _this._doValidate(model.uri, modeId);\n        };\n        var onModelRemoved = function (model) {\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\n            var uriStr = model.uri.toString();\n            var listener = _this._listener[uriStr];\n            if (listener) {\n                listener.dispose();\n                delete _this._listener[uriStr];\n            }\n        };\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\n            onModelRemoved(model);\n            _this._resetSchema(model.uri);\n        }));\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n            onModelRemoved(event.model);\n            onModelAdd(event.model);\n            _this._resetSchema(event.model.uri);\n        }));\n        this._disposables.push(defaults.onDidChange(function (_) {\n            monaco.editor.getModels().forEach(function (model) {\n                if (model.getModeId() === _this._languageId) {\n                    onModelRemoved(model);\n                    onModelAdd(model);\n                }\n            });\n        }));\n        this._disposables.push({\n            dispose: function () {\n                monaco.editor.getModels().forEach(onModelRemoved);\n                for (var key in _this._listener) {\n                    _this._listener[key].dispose();\n                }\n            }\n        });\n        monaco.editor.getModels().forEach(onModelAdd);\n    }\n    DiagnosticsAdapter.prototype.dispose = function () {\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\n        this._disposables = [];\n    };\n    DiagnosticsAdapter.prototype._resetSchema = function (resource) {\n        this._worker().then(function (worker) {\n            worker.resetSchema(resource.toString());\n        });\n    };\n    DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\n        this._worker(resource).then(function (worker) {\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\n                var model = monaco.editor.getModel(resource);\n                if (model.getModeId() === languageId) {\n                    monaco.editor.setModelMarkers(model, languageId, markers);\n                }\n            });\n        }).then(undefined, function (err) {\n            console.error(err);\n        });\n    };\n    return DiagnosticsAdapter;\n}());\nexport { DiagnosticsAdapter };\nfunction toSeverity(lsSeverity) {\n    switch (lsSeverity) {\n        case ls.DiagnosticSeverity.Error: return monaco.MarkerSeverity.Error;\n        case ls.DiagnosticSeverity.Warning: return monaco.MarkerSeverity.Warning;\n        case ls.DiagnosticSeverity.Information: return monaco.MarkerSeverity.Info;\n        case ls.DiagnosticSeverity.Hint: return monaco.MarkerSeverity.Hint;\n        default:\n            return monaco.MarkerSeverity.Info;\n    }\n}\nfunction toDiagnostics(resource, diag) {\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\n    return {\n        severity: toSeverity(diag.severity),\n        startLineNumber: diag.range.start.line + 1,\n        startColumn: diag.range.start.character + 1,\n        endLineNumber: diag.range.end.line + 1,\n        endColumn: diag.range.end.character + 1,\n        message: diag.message,\n        code: code,\n        source: diag.source\n    };\n}\n// --- completion ------\nfunction fromPosition(position) {\n    if (!position) {\n        return void 0;\n    }\n    return { character: position.column - 1, line: position.lineNumber - 1 };\n}\nfunction fromRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return { start: { line: range.startLineNumber - 1, character: range.startColumn - 1 }, end: { line: range.endLineNumber - 1, character: range.endColumn - 1 } };\n}\nfunction toRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\n}\nfunction toCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case ls.CompletionItemKind.Text: return mItemKind.Text;\n        case ls.CompletionItemKind.Method: return mItemKind.Method;\n        case ls.CompletionItemKind.Function: return mItemKind.Function;\n        case ls.CompletionItemKind.Constructor: return mItemKind.Constructor;\n        case ls.CompletionItemKind.Field: return mItemKind.Field;\n        case ls.CompletionItemKind.Variable: return mItemKind.Variable;\n        case ls.CompletionItemKind.Class: return mItemKind.Class;\n        case ls.CompletionItemKind.Interface: return mItemKind.Interface;\n        case ls.CompletionItemKind.Module: return mItemKind.Module;\n        case ls.CompletionItemKind.Property: return mItemKind.Property;\n        case ls.CompletionItemKind.Unit: return mItemKind.Unit;\n        case ls.CompletionItemKind.Value: return mItemKind.Value;\n        case ls.CompletionItemKind.Enum: return mItemKind.Enum;\n        case ls.CompletionItemKind.Keyword: return mItemKind.Keyword;\n        case ls.CompletionItemKind.Snippet: return mItemKind.Snippet;\n        case ls.CompletionItemKind.Color: return mItemKind.Color;\n        case ls.CompletionItemKind.File: return mItemKind.File;\n        case ls.CompletionItemKind.Reference: return mItemKind.Reference;\n    }\n    return mItemKind.Property;\n}\nfunction fromCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case mItemKind.Text: return ls.CompletionItemKind.Text;\n        case mItemKind.Method: return ls.CompletionItemKind.Method;\n        case mItemKind.Function: return ls.CompletionItemKind.Function;\n        case mItemKind.Constructor: return ls.CompletionItemKind.Constructor;\n        case mItemKind.Field: return ls.CompletionItemKind.Field;\n        case mItemKind.Variable: return ls.CompletionItemKind.Variable;\n        case mItemKind.Class: return ls.CompletionItemKind.Class;\n        case mItemKind.Interface: return ls.CompletionItemKind.Interface;\n        case mItemKind.Module: return ls.CompletionItemKind.Module;\n        case mItemKind.Property: return ls.CompletionItemKind.Property;\n        case mItemKind.Unit: return ls.CompletionItemKind.Unit;\n        case mItemKind.Value: return ls.CompletionItemKind.Value;\n        case mItemKind.Enum: return ls.CompletionItemKind.Enum;\n        case mItemKind.Keyword: return ls.CompletionItemKind.Keyword;\n        case mItemKind.Snippet: return ls.CompletionItemKind.Snippet;\n        case mItemKind.Color: return ls.CompletionItemKind.Color;\n        case mItemKind.File: return ls.CompletionItemKind.File;\n        case mItemKind.Reference: return ls.CompletionItemKind.Reference;\n    }\n    return ls.CompletionItemKind.Property;\n}\nfunction toTextEdit(textEdit) {\n    if (!textEdit) {\n        return void 0;\n    }\n    return {\n        range: toRange(textEdit.range),\n        text: textEdit.newText\n    };\n}\nfunction toCompletionItem(entry) {\n    return {\n        label: entry.label,\n        insertText: entry.insertText,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: entry.documentation,\n        detail: entry.detail,\n        kind: toCompletionItemKind(entry.kind),\n        textEdit: toTextEdit(entry.textEdit),\n        data: entry.data\n    };\n}\nfunction fromMarkdownString(entry) {\n    return {\n        kind: (typeof entry === 'string' ? ls.MarkupKind.PlainText : ls.MarkupKind.Markdown),\n        value: (typeof entry === 'string' ? entry : entry.value)\n    };\n}\nfunction fromCompletionItem(entry) {\n    var item = {\n        label: entry.label,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: fromMarkdownString(entry.documentation),\n        detail: entry.detail,\n        kind: fromCompletionItemKind(entry.kind),\n        data: entry.data\n    };\n    if (typeof entry.insertText === 'object' && typeof entry.insertText.value === 'string') {\n        item.insertText = entry.insertText.value;\n        item.insertTextFormat = ls.InsertTextFormat.Snippet;\n    }\n    else {\n        item.insertText = entry.insertText;\n    }\n    if (entry.range) {\n        item.textEdit = ls.TextEdit.replace(fromRange(entry.range), item.insertText);\n    }\n    return item;\n}\nvar CompletionAdapter = /** @class */ (function () {\n    function CompletionAdapter(_worker) {\n        this._worker = _worker;\n    }\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\n        get: function () {\n            return [' ', ':'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, token) {\n        var wordInfo = model.getWordUntilPosition(position);\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doComplete(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            var items = info.items.map(function (entry) {\n                var item = {\n                    label: entry.label,\n                    insertText: entry.insertText,\n                    sortText: entry.sortText,\n                    filterText: entry.filterText,\n                    documentation: entry.documentation,\n                    detail: entry.detail,\n                    kind: toCompletionItemKind(entry.kind),\n                };\n                if (entry.textEdit) {\n                    item.range = toRange(entry.textEdit.range);\n                    item.insertText = entry.textEdit.newText;\n                }\n                if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\n                    item.insertText = { value: item.insertText };\n                }\n                return item;\n            });\n            return {\n                isIncomplete: info.isIncomplete,\n                items: items\n            };\n        }));\n    };\n    return CompletionAdapter;\n}());\nexport { CompletionAdapter };\nfunction isMarkupContent(thing) {\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\n}\nfunction toMarkdownString(entry) {\n    if (typeof entry === 'string') {\n        return {\n            value: entry\n        };\n    }\n    if (isMarkupContent(entry)) {\n        if (entry.kind === 'plaintext') {\n            return {\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\n            };\n        }\n        return {\n            value: entry.value\n        };\n    }\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\n}\nfunction toMarkedStringArray(contents) {\n    if (!contents) {\n        return void 0;\n    }\n    if (Array.isArray(contents)) {\n        return contents.map(toMarkdownString);\n    }\n    return [toMarkdownString(contents)];\n}\n// --- hover ------\nvar HoverAdapter = /** @class */ (function () {\n    function HoverAdapter(_worker) {\n        this._worker = _worker;\n    }\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doHover(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            return {\n                range: toRange(info.range),\n                contents: toMarkedStringArray(info.contents)\n            };\n        }));\n    };\n    return HoverAdapter;\n}());\nexport { HoverAdapter };\n// --- definition ------\nfunction toLocation(location) {\n    return {\n        uri: Uri.parse(location.uri),\n        range: toRange(location.range)\n    };\n}\n// --- document symbols ------\nfunction toSymbolKind(kind) {\n    var mKind = monaco.languages.SymbolKind;\n    switch (kind) {\n        case ls.SymbolKind.File: return mKind.Array;\n        case ls.SymbolKind.Module: return mKind.Module;\n        case ls.SymbolKind.Namespace: return mKind.Namespace;\n        case ls.SymbolKind.Package: return mKind.Package;\n        case ls.SymbolKind.Class: return mKind.Class;\n        case ls.SymbolKind.Method: return mKind.Method;\n        case ls.SymbolKind.Property: return mKind.Property;\n        case ls.SymbolKind.Field: return mKind.Field;\n        case ls.SymbolKind.Constructor: return mKind.Constructor;\n        case ls.SymbolKind.Enum: return mKind.Enum;\n        case ls.SymbolKind.Interface: return mKind.Interface;\n        case ls.SymbolKind.Function: return mKind.Function;\n        case ls.SymbolKind.Variable: return mKind.Variable;\n        case ls.SymbolKind.Constant: return mKind.Constant;\n        case ls.SymbolKind.String: return mKind.String;\n        case ls.SymbolKind.Number: return mKind.Number;\n        case ls.SymbolKind.Boolean: return mKind.Boolean;\n        case ls.SymbolKind.Array: return mKind.Array;\n    }\n    return mKind.Function;\n}\nvar DocumentSymbolAdapter = /** @class */ (function () {\n    function DocumentSymbolAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\n            if (!items) {\n                return;\n            }\n            return items.map(function (item) { return ({\n                name: item.name,\n                containerName: item.containerName,\n                kind: toSymbolKind(item.kind),\n                location: toLocation(item.location)\n            }); });\n        }));\n    };\n    return DocumentSymbolAdapter;\n}());\nexport { DocumentSymbolAdapter };\nfunction fromFormattingOptions(options) {\n    return {\n        tabSize: options.tabSize,\n        insertSpaces: options.insertSpaces\n    };\n}\nvar DocumentFormattingEditProvider = /** @class */ (function () {\n    function DocumentFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentFormattingEditProvider;\n}());\nexport { DocumentFormattingEditProvider };\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\n    function DocumentRangeFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentRangeFormattingEditProvider;\n}());\nexport { DocumentRangeFormattingEditProvider };\nvar DocumentColorAdapter = /** @class */ (function () {\n    function DocumentColorAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.findDocumentColors(resource.toString()); }).then(function (infos) {\n            if (!infos) {\n                return;\n            }\n            return infos.map(function (item) { return ({\n                color: item.color,\n                range: toRange(item.range)\n            }); });\n        }));\n    };\n    DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range)); }).then(function (presentations) {\n            if (!presentations) {\n                return;\n            }\n            return presentations.map(function (presentation) {\n                var item = {\n                    label: presentation.label,\n                };\n                if (presentation.textEdit) {\n                    item.textEdit = toTextEdit(presentation.textEdit);\n                }\n                if (presentation.additionalTextEdits) {\n                    item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\n                }\n                return item;\n            });\n        }));\n    };\n    return DocumentColorAdapter;\n}());\nexport { DocumentColorAdapter };\n/**\n * Hook a cancellation token to a WinJS Promise\n */\nfunction wireCancellationToken(token, promise) {\n    if (promise.cancel) {\n        token.onCancellationRequested(function () { return promise.cancel(); });\n    }\n    return promise;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js\n// module id = 1207\n// module chunks = 2","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The diagnostic's serverity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.title);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: '' };\n    }\n    TextEdit.del = del;\n})(TextEdit || (TextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits) {\n        this.edits = edits;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\n        this.edits.push(TextEdit.insert(position, newText));\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\n        this.edits.push(TextEdit.replace(range, newText));\n    };\n    TextEditChangeImpl.prototype.delete = function (range) {\n        this.edits.push(TextEdit.del(range));\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            return this._workspaceEdit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (VersionedTextDocumentIdentifier.is(key)) {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    documentChanges: []\n                };\n            }\n            if (!this._workspaceEdit.documentChanges) {\n                throw new Error('Workspace edit is not configured for versioned document changes.');\n            }\n            var textDocument = key;\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    changes: Object.create(null)\n                };\n            }\n            if (!this._workspaceEdit.changes) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    return WorkspaceChange;\n}());\nexport { WorkspaceChange };\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param uri The document's text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n})(MarkedString || (MarkedString = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n    ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrance.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containg the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics) {\n        return { diagnostics: diagnostics };\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data))\n            result.data = data;\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * A document link is a range in a text document that links to an internal or external resource, like another\n * text document or a web site.\n */\nvar DocumentLink = /** @class */ (function () {\n    function DocumentLink() {\n    }\n    return DocumentLink;\n}());\nexport { DocumentLink };\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target) {\n        return { range: range, target: target };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return 0;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Ovelapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nexport var TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = null;\n    }\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = null;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === null) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js\n// module id = 1208\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as json from './_deps/jsonc-parser/main.js';\nexport function createTokenizationSupport(supportComments) {\n    return {\n        getInitialState: function () { return new JSONState(null, null, false); },\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\n    };\n}\nexport var TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\nexport var TOKEN_DELIM_ARRAY = 'delimiter.array.json';\nexport var TOKEN_DELIM_COLON = 'delimiter.colon.json';\nexport var TOKEN_DELIM_COMMA = 'delimiter.comma.json';\nexport var TOKEN_VALUE_BOOLEAN = 'keyword.json';\nexport var TOKEN_VALUE_NULL = 'keyword.json';\nexport var TOKEN_VALUE_STRING = 'string.value.json';\nexport var TOKEN_VALUE_NUMBER = 'number.json';\nexport var TOKEN_PROPERTY_NAME = 'string.key.json';\nexport var TOKEN_COMMENT_BLOCK = 'comment.block.json';\nexport var TOKEN_COMMENT_LINE = 'comment.line.json';\nvar JSONState = /** @class */ (function () {\n    function JSONState(state, scanError, lastWasColon) {\n        this._state = state;\n        this.scanError = scanError;\n        this.lastWasColon = lastWasColon;\n    }\n    JSONState.prototype.clone = function () {\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\n    };\n    JSONState.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        }\n        if (!other || !(other instanceof JSONState)) {\n            return false;\n        }\n        return this.scanError === other.scanError &&\n            this.lastWasColon === other.lastWasColon;\n    };\n    JSONState.prototype.getStateData = function () {\n        return this._state;\n    };\n    JSONState.prototype.setStateData = function (state) {\n        this._state = state;\n    };\n    return JSONState;\n}());\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\n    if (offsetDelta === void 0) { offsetDelta = 0; }\n    // handle multiline strings and block comments\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\n    switch (state.scanError) {\n        case 2 /* UnexpectedEndOfString */:\n            line = '\"' + line;\n            numberOfInsertedCharacters = 1;\n            break;\n        case 1 /* UnexpectedEndOfComment */:\n            line = '/*' + line;\n            numberOfInsertedCharacters = 2;\n            break;\n    }\n    var scanner = json.createScanner(line), kind, ret, lastWasColon = state.lastWasColon;\n    ret = {\n        tokens: [],\n        endState: state.clone()\n    };\n    while (true) {\n        var offset = offsetDelta + scanner.getPosition(), type = '';\n        kind = scanner.scan();\n        if (kind === 17 /* EOF */) {\n            break;\n        }\n        // Check that the scanner has advanced\n        if (offset === offsetDelta + scanner.getPosition()) {\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n        }\n        // In case we inserted /* or \" character, we need to\n        // adjust the offset of all tokens (except the first)\n        if (adjustOffset) {\n            offset -= numberOfInsertedCharacters;\n        }\n        adjustOffset = numberOfInsertedCharacters > 0;\n        // brackets and type\n        switch (kind) {\n            case 1 /* OpenBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 2 /* CloseBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 3 /* OpenBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 4 /* CloseBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 6 /* ColonToken */:\n                type = TOKEN_DELIM_COLON;\n                lastWasColon = true;\n                break;\n            case 5 /* CommaToken */:\n                type = TOKEN_DELIM_COMMA;\n                lastWasColon = false;\n                break;\n            case 8 /* TrueKeyword */:\n            case 9 /* FalseKeyword */:\n                type = TOKEN_VALUE_BOOLEAN;\n                lastWasColon = false;\n                break;\n            case 7 /* NullKeyword */:\n                type = TOKEN_VALUE_NULL;\n                lastWasColon = false;\n                break;\n            case 10 /* StringLiteral */:\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\n                lastWasColon = false;\n                break;\n            case 11 /* NumericLiteral */:\n                type = TOKEN_VALUE_NUMBER;\n                lastWasColon = false;\n                break;\n        }\n        // comments, iff enabled\n        if (comments) {\n            switch (kind) {\n                case 12 /* LineCommentTrivia */:\n                    type = TOKEN_COMMENT_LINE;\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    type = TOKEN_COMMENT_BLOCK;\n                    break;\n            }\n        }\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\n        ret.tokens.push({\n            startIndex: offset,\n            scopes: type\n        });\n    }\n    return ret;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/tokenization.js\n// module id = 1209\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js\n// module id = 1210\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format.js';\nimport { parseTree, findNodeAtLocation } from './parser.js';\nexport function removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nexport function setProperty(text, path, value, formattingOptions, getInsertionIndex) {\n    var errors = [];\n    var root = parseTree(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) {\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) {\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) {\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n    var _a;\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) {\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    var edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js\n// module id = 1211\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { WorkerManager } from './workerManager.js';\nimport * as languageFeatures from './languageFeatures.js';\nimport { createTokenizationSupport } from './tokenization.js';\nexport function setupMode(defaults) {\n    var disposables = [];\n    var client = new WorkerManager(defaults);\n    disposables.push(client);\n    var worker = function () {\n        var uris = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            uris[_i] = arguments[_i];\n        }\n        return client.getLanguageServiceWorker.apply(client, uris);\n    };\n    var languageId = defaults.languageId;\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));\n    disposables.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));\n    disposables.push(monaco.languages.setTokensProvider(languageId, createTokenizationSupport(true)));\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\n    disposables.push(monaco.languages.registerColorProvider(languageId, new languageFeatures.DocumentColorAdapter(worker)));\n}\nvar richEditConfiguration = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string'] },\n        { open: '[', close: ']', notIn: ['string'] },\n        { open: '\"', close: '\"', notIn: ['string'] }\n    ]\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/jsonMode.js\n// module id = 982\n// module chunks = 2"],"sourceRoot":""}