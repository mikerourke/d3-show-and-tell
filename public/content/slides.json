{
  "1": {
    "slideNumber": 1,
    "title": "Introduction to D3",
    "code": "// This is the D3 logo taken right from their website.\nvar D3Logo = () => (\n  <svg width={96} height={96}>\n    <clipPath id=\"clip\">\n      <path d=\"M0,0h7.75a45.5,45.5 0 1 1 0,91h-7.75v-20h7.75a25.5,25.5 0 1 0 0,-51h-7.75zm36.2510,0h32a27.75,27.75 0 0 1 21.331,45.5a27.75,27.75 0 0 1 -21.331,45.5h-32a53.6895,53.6895 0 0 0 18.7464,-20h13.2526a7.75,7.75 0 1 0 0,-15.5h-7.75a53.6895,53.6895 0 0 0 0,-20h7.75a7.75,7.75 0 1 0 0,-15.5h-13.2526a53.6895,53.6895 0 0 0 -18.7464,-20z\" />\n    </clipPath>\n    <linearGradient\n      id=\"gradient-1\"\n      gradientUnits=\"userSpaceOnUse\"\n      x1={7}\n      y1={64}\n      x2={50}\n      y2={107}\n    >\n      <stop offset=\"0\" stopColor=\"#f9a03c\" />\n      <stop offset=\"1\" stopColor=\"#f7974e\" />\n    </linearGradient>\n    <linearGradient\n      id=\"gradient-2\"\n      gradientUnits=\"userSpaceOnUse\"\n      x1=\"2\"\n      y1=\"-2\"\n      x2=\"87\"\n      y2=\"84\"\n    >\n      <stop offset=\"0\" stopColor=\"#f26d58\" />\n      <stop offset=\"1\" stopColor=\"#f9a03c\" />\n    </linearGradient>\n    <linearGradient\n      id=\"gradient-3\"\n      gradientUnits=\"userSpaceOnUse\"\n      x1={45}\n      y1={-10}\n      x2={108}\n      y2={53}\n    >\n      <stop offset=\"0\" stopColor=\"#b84e51\" />\n      <stop offset=\"1\" stopColor=\"#f68e48\" />\n    </linearGradient>\n    <g clipPath=\"url(#clip)\">\n      <path d=\"M-100,-102m-27,0v300h300z\" fill=\"url(#gradient-1)\" />\n      <path d=\"M-100,-102m27,0h300v300z\" fill=\"url(#gradient-3)\" />\n      <path\n        d=\"M-100,-102l300,300\"\n        fill=\"none\"\n        stroke=\"url(#gradient-2)\"\n        strokeWidth={40}\n      />\n    </g>\n  </svg>\n);\n\n// Here's some reusable text for our slide.\nvar SlideText = (props) => (\n  <text\n    textAnchor=\"middle\"\n    alignmentBaseline=\"central\"\n    fill=\"white\"\n    fontFamily=\"Poppins\"\n    {...props}\n  >\n    {props.children}\n  </text>\n)\n\n// This is the whole kit and caboodle!\nvar Slide = () => (\n  <svg viewBox=\"0 0 240 240\" className=\"wrapper\">\n    <rect x={0} y={0} width=\"100%\" height=\"100%\" fill=\"#3274B7\" />\n    <SlideText x=\"43%\" y=\"40%\" fontSize={18}>Introduction to</SlideText>\n    <svg viewBox=\"0 0 1200 1200\" x=\"72%\" y=\"36.5%\">\n      <D3Logo />\n    </svg>\n    <SlideText x=\"50%\" y=\"48%\" fontSize={18}>and SVG</SlideText>\n    <g transform=\"translate(0, 224)\">\n      <rect width=\"100%\" height={16} fill=\"white\" />\n      <image href=\"../images/pandera-labs.png\" x=\"75%\" y={0} width={60} />\n    </g>\n  </svg>\n);\n\n// This method is required to render the React component, there's\n// some mojo going on behind the scenes.\nrender(<Slide />);",
    "styles": "#contents {\n  box-shadow: var(--main-box-shadow);\n}",
    "datasetName": ""
  },
  "2": {
    "slideNumber": 2,
    "title": "Line Chart Example",
    "code": "var margin = { top: 10, right: 20, bottom: 30, left: 30 };\nvar width = 800 - margin.left - margin.right;\nvar height = 770 - margin.top - margin.bottom;\n\nvar svg = d3.select('.chart')\n  .append('svg')\n  .attr('width', width + margin.left + margin.right)\n  .attr('height', height + margin.top + margin.bottom)\n  .call(responsivefy)\n  .append('g')\n  .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\nvar data = currentData.map(company => ({\n  ...company,\n  values: company.values.map(d => ({\n    date: d3.timeParse('%Y/%m/%d')(d.date),\n    close: +d.close\n  }))\n}));\n\nvar xScale = d3.scaleTime()\n  .domain([\n    d3.min(data, co => d3.min(co.values, d => d.date)),\n    d3.max(data, co => d3.max(co.values, d => d.date)),\n  ])\n  .range([margin.left, width - margin.right])\n\nvar xAxis = g => g\n  .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n  .call(d3.axisBottom(xScale).ticks(width / 80));\n\nsvg\n  .append(\"g\")\n  .call(xAxis);\n\nvar yScale = d3.scaleLinear()\n  .domain([\n    d3.min(data, co => d3.min(co.values, d => d.close)),\n    d3.max(data, co => d3.max(co.values, d => d.close)),\n  ])\n  .range([height - margin.bottom, margin.top])\n\nvar yAxis = g => g\n  .attr(\"transform\", `translate(${margin.left},0)`)\n  .call(d3.axisLeft(yScale));\n\nsvg\n  .append(\"g\")\n  .call(yAxis);\n\nvar line = d3.line()\n  .x(d => xScale(d.date))\n  .y(d => yScale(d.close))\n  .curve(d3.curveCatmullRom.alpha(0.5))\n\nsvg\n  .selectAll('.line')\n  .data(data)\n  .enter()\n  .append('path')\n  .attr('class', 'line')\n  .attr('d', d => line(d.values))\n  .attr('stroke', (d, i) => ['#FF9900', '#3369e8'][i])\n  .attr('stroke-width', 2)\n  .attr('fill', 'none');\n",
    "styles": "#contents {\n  box-shadow: var(--main-box-shadow);\n}",
    "datasetName": "stocks"
  },
  "3": {
    "slideNumber": 3,
    "title": "Slide 3",
    "code": "// This is some test code.",
    "styles": "#contents {\n  box-shadow: var(--main-box-shadow);\n}",
    "datasetName": ""
  },
  "4": {
    "slideNumber": 4,
    "title": "Slide 4",
    "code": "// This is some test code.",
    "styles": "#contents {\n  box-shadow: var(--main-box-shadow);\n}",
    "datasetName": ""
  },
  "5": {
    "slideNumber": 5,
    "title": "Slide 5",
    "code": "// This is some test code.",
    "styles": "#contents {\n  box-shadow: var(--main-box-shadow);\n}",
    "datasetName": ""
  }
}
